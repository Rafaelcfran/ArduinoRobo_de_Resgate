class DCMotor {
  int spd = 255, pin1, pin2, enable;

public:
  void Pinout(int in1, int in2, int enb) {
    pin1 = in1;
    pin2 = in2;
    enable = enb;
    pinMode(pin1, OUTPUT);
    pinMode(pin2, OUTPUT);
    pinMode(enable, OUTPUT);
  }

  void Forward(int speed) {
    spd = speed;
    digitalWrite(pin1, LOW);
    digitalWrite(pin2, HIGH);
    analogWrite(enable, spd);
  }

  void Backward(int speed) {
    spd = speed;
    digitalWrite(pin1, HIGH);
    digitalWrite(pin2, LOW);
    analogWrite(enable, spd);
  }

  void Stop() {
    digitalWrite(pin1, HIGH);
    digitalWrite(pin2, HIGH);
    analogWrite(enable, 0);
  }
};

DCMotor Motor1, Motor2;
//Motor 2 = motor esquerdo
//Motor 1 = motor direito
int estadoAtual, estadoAnterior;

#define ESTADO_PARADO 0
#define ESTADO_FRENTE 1
#define ESTADO_DIREITA 2
#define ESTADO_ESQUERDA 3
#define ESTADO_TRAS -1
#define ESTADO_FRENTE_SAPATINHO 4
#define ESTADO_OBSTACULO 5
unsigned long UScontadorMillis = millis();


void forward(int v1, int v2) {
  if (millis() - UScontadorMillis <= 30) {
    Motor1.Forward(v1);
    Motor2.Forward(v2);


  } else if (millis() - UScontadorMillis <= 80) {
    Motor1.Stop();
    Motor2.Stop();
  } else UScontadorMillis = millis();
}
void obstaculo(int v1, int v2) {

  Motor1.Forward(v1);
  Motor2.Forward(v2);
}

void curvaesq() {
  if (millis() - UScontadorMillis <= 20) {
    Motor1.Forward(233);

    Motor2.Stop();
  } else if (millis() - UScontadorMillis <= 80) {
    Motor1.Stop();
    Motor2.Stop();
  } else UScontadorMillis = millis();
}

void curvadir() {
  if (millis() - UScontadorMillis <= 20) {
    Motor2.Forward(255);
    Motor1.Stop();
  } else if (millis() - UScontadorMillis <= 80) {
    Motor1.Stop();
    Motor2.Stop();
  } else UScontadorMillis = millis();
}


void stop() {
  Motor1.Stop();
  Motor2.Stop();
}

void backward() {
  if (millis() - UScontadorMillis <= 20) {
    Motor1.Backward(255);
    Motor2.Backward(255);
  } else if (millis() - UScontadorMillis <= 80) {
    Motor1.Stop();
    Motor2.Stop();
  } else UScontadorMillis = millis();
}

const int pinoTrig = 10;  // Pino do Trigger
const int pinoEcho = 11;  // Pino do Echo


float distancia;

int leituraIRe, leituraIRd, leituraIRpontaD, leituraIRpontaE;
int pinoIRpontaE = 12, pinoIRpontaD = 11, pinoIRe = 2, pinoIRd = 3;
boolean obsEs = false, flagdir = false, flagesq = false;

unsigned long EstadoDuration = millis();
unsigned long OBScontadorMillis = millis();


void setup() {
  Motor1.Pinout(5, 4, 6);
  Motor2.Pinout(7, 8, 9);
  Serial.begin(9600);
  int estadoAtual = ESTADO_PARADO;
  int estadoAnterior = ESTADO_PARADO;
  // pinMode(pinoEcho, INPUT);
  // pinMode(pinoTrig, OUTPUT);
  // digitalWrite(pinoTrig, LOW);
}

void loop() {


  //    if((millis() - UScontadorMillis) >= 1000 && digitalRead(pinoTrig) == LOW) {
  //        digitalWrite(pinoTrig, HIGH);
  //        UScontadorMillis = millis();
  //        UScontadorMicros = micros();
  //    }
  //    if((micros() - UScontadorMicros) >= 10 && digitalRead(pinoTrig) == HIGH) {
  //        digitalWrite(pinoTrig, LOW);
  //        float deltaT = pulseIn(pinoEcho,HIGH);
  //        distancia = deltaT * 0.034 / 2 ;
  //        //Serial.print("Distancia em cm: ");
  //        //Serial.println(distancia);
  //    }

  leituraIRe = digitalRead(pinoIRe);
  leituraIRpontaD = digitalRead(pinoIRpontaD);
  leituraIRpontaE = digitalRead(pinoIRpontaE);
  leituraIRd = digitalRead(pinoIRd);

  // if ((leituraIRe == HIGH || leituraIRpontaD == HIGH ||  leituraIRpontaE == HIGH ||  leituraIRd == HIGH) && obsEs == false ) IRcontadorMillis = millis();
  /*if ((millis() - IRcontadorMillis) >= 2000) {
    Serial.print("leitura da infra da flag esquerda é ");
    Serial.println(leituraIRpontaE);
    Serial.print("leitura da flag esquerda é ");
    Serial.println(flagesq);
    Serial.print("leitura do infra esquerdo: ");
    Serial.println(leituraIRe);
    Serial.print("leitura do infra da flag direita é ");
    Serial.println(leituraIRpontaD);
    Serial.print("leitura da flag direito é ");
    Serial.println(flagdir);
    Serial.print("leitura do infra direito: ");
    Serial.println(leituraIRd);
    Serial.println(" ");
    IRcontadorMillis = millis();
    }
  */

  // ------------------------------------------- Prioridade da Lógica de Estado ------------------------------------------
  if (leituraIRpontaD == HIGH) flagdir = true;



  if (leituraIRpontaE == HIGH) flagesq = true;

  if (millis() - EstadoDuration < 5000 && millis() - OBScontadorMillis > 2000) {


    if ((leituraIRd == HIGH && leituraIRe == HIGH) && (flagdir == false && flagesq == false)) {
      estadoAtual = ESTADO_FRENTE_SAPATINHO;
    } else {


      if (flagdir == true) {
        estadoAtual = ESTADO_DIREITA;
      } else {
        if (leituraIRd == HIGH) {
          // detecta para fazer curva para a direita
          flagesq = false;
          estadoAtual = ESTADO_DIREITA;
        }
      }

      if (flagesq == true) {
        estadoAtual = ESTADO_ESQUERDA;
      } else {
        if (leituraIRe == HIGH) {
          // detecta para fazer curva para a esquerda
          flagdir = false;
          estadoAtual = ESTADO_ESQUERDA;
        }
      }

      if ((leituraIRd == LOW && leituraIRe == LOW) && (flagdir == false && flagesq == false)) {
        estadoAtual = ESTADO_FRENTE;
      }


      if (flagdir == true && flagesq == true && estadoAnterior == ESTADO_DIREITA) {
        flagesq = false;
        estadoAtual = estadoAnterior;
      } else if (flagdir == true && flagesq == true && estadoAnterior == ESTADO_ESQUERDA) {
        flagdir = false;
        estadoAtual = estadoAnterior;
      }
    }
  } else if (millis() - EstadoDuration > 5000) {
    estadoAtual = ESTADO_OBSTACULO;
    obsEs = true;

    OBScontadorMillis = millis();
  }

  if (estadoAtual != estadoAnterior) {
    estadoAnterior = estadoAtual;
    EstadoDuration = millis();
  }

  switch (estadoAtual) {
    case ESTADO_FRENTE:
      forward(215, 220);
      break;

    case ESTADO_PARADO:
      stop();
      break;

    case ESTADO_DIREITA:
      curvadir();
      break;

    case ESTADO_ESQUERDA:
      curvaesq();
      break;

    case ESTADO_TRAS:
      backward();
      break;

    case ESTADO_FRENTE_SAPATINHO:
      forward(170, 180);
      break;

    case ESTADO_OBSTACULO:
      if (millis() - OBScontadorMillis <= 800) {
        backward();
      } else if (millis() - OBScontadorMillis <= 800) {
        obstaculo(255, 255);
      } else {
        obsEs = false;
        stop();
        UScontadorMillis = 0;
      }
      break;
  }
}
